


             ***** [lightlang.png] *****
===============================================================================
***** About LightLang *****
===============================================================================
   LightLang - is a set of language programs for Linux. Its main part is the
system of electronic dictionaries. It consists of several programs - SL (the
search kernel), XSL (the program's graphical interface written with the use of
Qt4), LLRepo (the utility for working with LightLang repositories).
   Additional packages expand the program's functionality, adding, for example,
a possibility to hear the pronunciation of a word.
   The system is set up in such a manner that you do not have to use the SL
graphical interface, and invoke the search kernel directly from the command
line instead. It is very convenient when using systems without the X-server.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** What's new in this LightLang release *****
===============================================================================
   SL:
    * An options to output translation in dictionary's original format is
      added.
   XSL:
    * Translate-sites menu extension is added;
    * Possibility of window autodetection by Spy is added;
    * A menu for opening links is added in the search panel;
    * Processing of performance-critical sections of the code is improved;
    * A normal About dialog is finally made;
    * Tray icon and it's menu are modified;
    * Art-scheme is changed.
   LLRepo:
    * The program is fully written in Python;
    * Option syntax is changed.

*** Versions of the programs and utilities of this package ***
SL, the search kernel
6.5
XSL, the graphical interface
6.6
LLRepo, the repository manager
2.0
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Requirements and configuration *****
===============================================================================
**** Installing LightLang ****
   Qt4 graphical library, its Python layer - PyQt4, which is in need of SIP (do
not confuse with IP telephony). All these packages can be found in your
distributive's repositories, so installing these packages can be brought to
typing commands, containing a few words. But if you won't find the libraries,
then you'll have to install them yourself. At that moment SIP and Qt4 are rare,
but they can be always found in the repositories of modern distributives.
PyQt4, the necessary component for LightLang, is often missing. So you can
download Qt4, SIP and PyQt4 using the following links:
    * http://trolltech.com/developer/downloads/qt/x11
    * http://www.riverbankcomputing.co.uk/sip/download.php
    * http://www.riverbankcomputing.co.uk/pyqt/download.php
   Libraries should be compiled and installed in the order they are shown here.
Installing is not described here, for it doesn't differ from the usual one.
   Remember that it would be best to find them as prepared packages for your
distributive.
   Required versions:
    * Qt4 >= 4.2.2
    * SIP >= 4.6
    * PyQt4 >= 4.2.2
   After the installation of libraries is finished, you can start installing
LightLang.
   There are several configure options available, which can be sent by using
configure script:
    * --prefix=prefix_dir - specifies the install directory prefix, by default
      - /usr
    * ;
--with-default-config=normal|liksys|kde|console - used to select a
configuration preset. These presets were made and named by developers to be
suitable for your system. Default preset is normal, because this configuration
is suitable for the majority of users, but you can also use other options, for
example liksys - this configuration is used by the main developer;
--with-audio-player=player_prog - specifies the audio player, which is used for
playing voice transcriptions of the words. Player is required to be able to be
run in console suing look alike command:
      player filename
   it is also required to be able to run OGG, for LightLang stores its voice
transcription files in that format (what differs it from other dictionaries,
for they use lossless WAV). For example, you can specify MPlayer as a player: -
-with-audio-player=mplayer. A the same time, path to executable player file
must be located in your PATH variable. Default player is play;
--with-gui-terminal=terminal_prog - used fro specifying the graphical terminal.
Default is XTerm, but KDE fans can specify Konsole for example;
--with-gui-flag=no - used for choosing whether the graphical interface will be
installed or not (and calculate dependencies for it). Default is yes. Disabling
installation of the graphical interface is generally used on machines that do
not support graphical systems or when user wants to install another graphical
interface for SL.
   You can download the dictionaries from our repositories during the install
using download.py script, which must be executed between configure and make. If
you want to see the list of dictionaries and sounds that we have in our
repositories, execute from LightLang directory the following commands:
      ./download.py remotelist dicts
      ./download.py remotelist sounds
   After that you can add, for example, a dictionary to LightLang sources tree
using this command:
      ./download.py install dicts Mueller-24.en-ru
   It will be automatically unpacked and added to the sources catalog and then,
during the build phase, it will be compiled. To browse available options for
working with repositories type:
      ./download.py help
   Usually, LightLang is installed as it is shown below (we'll also download en
sounds and Mueller-24.en-ru dictionary):
      [liksys@max ~]$ tar -xjvf lightlang-0.8.6.tar.bz2
      [liksys@max ~]$ cd lightlang-0.8.6
      [liksys@max lightlang-0.8.6]$ ./configure
      [liksys@max lightlang-0.8.6]$ ./download.py install dicts Mueller-24.en-
ru
      [liksys@max lightlang-0.8.6]$ ./download.py install sounds en
      [liksys@max lightlang-0.8.6]$ make
      [liksys@max lightlang-0.8.6]$ su
      Password: enter root password
      [root@max lightlang-0.8.6]$ make install


**** Possible problems: Fedora 7 ****
   While installing PyQt4 you can get an error. I've solved this problem, but I
don't remember how :-) Trying to remember. But this problem can be solved.


**** Possible problems: Mandriva 2007 ****
   Mandriva (2007.0 and 1) users will have to download the specified libraries
from Cooker and install them from the sources. Also, Python-KDE, Python-Qt3 and
QScintilla problems may appear. All this should be installed. Or just wait for
2008.0.


**** Possible Problems: (K)Ubuntu ****
   A problem may appear at the configuration phase:
      checking for gcc... gcc
      checking for C compiler default output file name...
      configure: error: C compiler cannot create executables
      See `config.log' for more details.
   In that case you should install libstdc++-<version>-dev including its
dependencies.

   Another problem may appear at the configuration phase:
      checking for play... error: play is not found
   This problem can be solved by installing SOX or SND package, or you can
simply specify another audio-player.

   And one more problem may appear at the configuration phase:
      Traceback (most recent call last):
      File "/usr/bin/xsl", line 24, in <module>
      import Main
      File "/usr/lib/xsl/pyqt4/Main.py", line 6, in <module>
      from PyQt4 import Qt
      File "/usr/lib/python2.5/site-packages/PyQt4/Qt.py", line 4, in <module>
      from PyQt4.QtOpenGL import *
      ImportError: No module named QtOpenGL
   This problem can be solved by installing python-qt4-gl and python-qt4-sql
including their dependencies.


   Remember, that if some component won't be found during the configuration,
the problem will display an error and tell you where you can get it.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Using SL in console *****
===============================================================================
**** Search Options ****
   SL - is the search kernel, the main programme in the LightLang package. It
provides the entire principal functionality of the dictionary - search,
dictionary management, assembly of indexes. SL can be effectively used in
console, using the command-line options.

   To find a word, run:
      sl word

   The same is done by the option -u (--usualy):
      sl -u word

   To find a phrase, type it in quotation marks:
      sl "a couple of words"

   To find the first word that begins with the characters typed in, use the
option -f (--first-concurrence):
      sl -f word's_first_letters
   The search also automatically starts in this mode when no words have been
found by the usual search.
   To employ the advanced search, use the option -c (--word-combinations):
      sl -c word
   All possible phrases with that word will be found.

   If you forgot a word, you may use the option -l (--list):
      sl -l word's_first_letters
   The initial letters may be, for example, hell. After that, the program will
print all words beginning in those characters. It will certainly contain the
word you are looking for, such as hello. If you still have not found the
required word, reduce the number of symbols removing letters at the end one by
one (turning hell to hel).

   If you are not sure about the correct spelling of a word, you may try and
find the word that you think is spelled correctly, using the option -i (--ill-
defined):
      sl -i countr
   The list of words will include the word you need, for example counter. That
option may also be used as follows:
      sl -p 50 -i countr
   The additional argument (-p (--percent) 50) indicates the number of
mismatching symbols, in percent. The default is 40, which is the optimal value.

   If you have installed the sound package, you can hear the pronunciation of
the word, using option -s (--sound):
      sl -s set:word
   Parameter set is the name of the installed set of sounds, for example en.


**** Help Options ****
   Option --help displays short help.

   Option --version displays program version.

   Option --debug displays debugging information.


**** Dictionary Managing Options ****
   Option --connect connects specified dictionary:
      sl --connect "dict"

   Option --disconnect disconnects specified dictionary (it won't be used in
word search):
      sl --disconnect "dict"

   Option --print-info displays the list of all the dictionaries and connected
dictionaries:
      sl --print-info

   You can add your own dictionary using option --install:
      sl --install "file"
   Then, if you want to connect it use --connect option as shown above.
   Format of the added dictionary must be congruent with SL format, for the
program doesn't work with dictionaries of other formats.

   You can also delete installed dictionary using option --uninstall:
      sl --uninstall "dict"
   Disconnect the dictionary before uninstalling it.

   Option --use-list defines the list of dictionaries, which are used for the
search. It doesn't matter whether the dictionary is connected or not. To
separate the dictionaries "|" symbols are used, and the list itself is enclosed
by quotation marks:
      sl --use-list 'dict1|dict2|dict3' ...

   Option --print-index indexes the specified file:
      sl --print-index "file"
   Derived index must be written in the beginning of the dictionary.
   After you have saved it re-index the file again, for the file offset has
changed. new index should be written over the old one.
   Typical indexing algorithm should look like this:
      sl --print-index dict > /tmp/dict1
      cat dict >> /tmp/dict1
      sl --print-index /tmp/dict1 > /tmp/dict2
      cat dict >> /tmp/dict2
      mv /tmp/dict2 dict
   If you don't want to use indexing just write [noindex] in the beginning of
the file.


**** Setup Options ****
   Option --output-format=html|text specifies program output format. By default
it's text.

   Option --use-terminal-escapes=yes|no sets the permission of using ESC-
sequences of terminal for colored formatting. By default it is permitted. If
standard output is a terminal - option is used for forced permission set.

   Option -t (--show-time) makes the program show the time which was spent for
the search.


**** Environment variables ****
   When using the command line, you can export the COLUMNS environment
variable, then the program output (for the text mode) will be justified to the
width of the console:
      export COLUMNS

   SL defines user's home directory using HOME variable. If you'll change it
the program will search for another directory with configurations (which must
be located in user's home directory).
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Using repository manager LLRepo *****
===============================================================================
   LLRepo - is LightLang repository manager made for adding local glossary
bases and other resources from LightLang FTP repository. You can easily add a
new resource to the system using llrepo. Of course, your computer must be
connected to the Internet :-).

   At this moment LLRepo supports four resource managing operations:
remotelist, locallist, install, uninstall. First two are informational, they
are used for getting information about available and installed resources, the
rest are for installing and uninstalling resources. For all the four options it
is necessary to specify the type of resource - dicts or sounds. It is necessary
to specify the name of the resource after its type for install and uninstall
options (more than one resource can be specified).

   To browse available dictionaries in the repository use:
      llrepo remotelist dicts

   To browse available sounds in the repository use:
      llrepo remotelist sounds

   To install dictionaries from the repository use (last parameter is the names
of dicts to install, which you can get by informational commands):
      llrepo install dicts file1 file2 fileN

   To install sound from the repository use (last parameter is the names of
needed resources, which you can get by informational commands):
      llrepo install sounds file1 file2 fileN

   To browse installed dictionaries use:
      llrepo locallist dicts

   To browse installed sounds use:
      llrepo locallist sounds

   To delete installed dictionaries use (last parameter is the names of needed
resources, which you can get by informational commands):
      llrepo uninstall dicts file1 file2 fileN

   To delete installed sounds use (last parameter is the names of needed
resources, which you can get by informational commands):
      llrepo uninstall sounds file1 file2 fileN

   Commands help and version display short help and information about program
version.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Tags and dictionary format *****
===============================================================================
   SL format represents modified Mova format. Every record forms one line in
the dictionary, word and its translation are separated by two spaces. Special
tags, that manage search and formatting, are used.

*** Search managing tags ***
[index]
Marks the beginning of the index.
[/index]
Marks the end of the index.
[noindex]
Marks an unindexed file.
#
Commentary. It is ignored as well as empty lines during the search.

*** Formatting tags ***
\{...\}
Blocks. If the text is enclosed by blocks it will differ from the other text:
it will be placed on the new line, while other will be tabulated. Can be
inserted making grouped text inside large block-groups.
\[...\]
Makes the enclosed text bold.
\(...\)
Makes the enclosed text cursive.
\<...\>
Text, enclosed in this tag, will be marked as official (which usually is marked
by green color).
\_...\_
Underlines the enclosed text.
\@...\@
Makes enclosed text a link to another word.
\s...\s
Text, enclosed in this tag, will be presented as a link to sound transcription.
Request syntax is similar to -s option.
\n
New line symbol.
\t
Tabulation symbol.
\\
Slash symbol.

   Index has the following format:
      [index]
      ...
      char value
      ...
      [/index]
where char - is some symbol, value - is the symbol offset.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Using graphical interface XSL *****
===============================================================================
   The way to use the graphical interface becomes clear immediately after it
has been launched, that is why this section describes only certain specifics
and correspondence between the console options of SL and its graphical
interface components.


**** Specific features of the XSL graphical interface ****
    * Words beginning with letters typed in will be displayed as you type;
    * Each word in the list is a link that you can click on to see the
      translation of the word;
    * Pressing Enter invokes the usual search for a word;
    * After the search has been completed, you can hear the pronunciation (if
      transcription is available) by pressing Ctrl+S;
    * Every word can be opened in a separate tab; tabs are independent and the
      contents in one tab do not affect the contents of another tab;


*** Correspondence between the command-line options and the graphical interface
components ***
-u
[Search]
-l
Automatic or [Word list]
-c
[Expanded search]
-i
[Similar words]


**** Additional features ****

   XSL contains the Spy service, which executes a search by the highlighted
word. After the service has been launched, use the mouse cursor to select a
word, in any window, and you will see its translation. You can open the XSL
main window and edit the search request.
   XSL also creates a tray icon and is able to hide in it. The Icons menu
contains the Spy controls, which allows to use that service without expanding
the program's main window.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** IFA Technology (Integratable Friend Applications) *****
===============================================================================
   IFA Technology (Integratable Friend Applications) allows applications to
increase each other's functionality by adding the possibility to launch a
certain application right from the running one and provides the possibility to
execute random API of the parent application and after the start of child
application.
   If one application (child) wants to increase other application's (parent's)
functionality, giving the parent application a possibility to run itself with
certain parameters, it has to give the parent application description of the
method to run it and (maybe) a chain of necessary API functions, which would
take some actions to the parent application before and after the start of a
child one. It is achieved due to using simple XML files, which contain all the
necessary information. Parent application reads that file and registers all the
information about the application. Then (depending on the realization) it
creates a menu item which, when activated, allows user to start a child
application.
   This technology differs from the usual menu items due to the possibility of
accessing to API of the parent process for XML file. This can be useful if, for
example, a child application is installing some files which are used in the
parent application, so after child application's work is finished an automatic
update of the list of available files for the parent application can be run.
Possibility to access API differs depending on the programming language which
is used to write the program (or depending on the language of requests to API).
In interpretable or byte-code compiled languages (Python, for example),
execution of random functions can be performed using built-in features (exec in
Python), other languages can require building in interpretators or other
utilities for executing scripts. For example, realization for C++ and Qt4 can
look like interpretation of QSA.
   IFA files also can localize to change program's description language. By
default UTF-8 is used, but there realization can be different.
   Here's an example of IFA file for XSL:
   <?xml version="1.0" encoding="UTF-8"?>
   <app>
      <title>LLRepo Console</title>
      <title lang="ru">Консоль LLRepo</title>
      <description>LLRepo - root terminal mode</description>
   <description lang="ru">LLRepo - терминал root</description>
      <path>/usr/bin/xterm</path>
      <options>
         -e "echo To get started with LLRepo run su and enter the root
password.
         To learn more details about the available options, run man llrepo
&amp;&amp; /bin/sh"
      </options>
      <postcode lang="python">
         main.main_window.dicts_manager.update()
      </postcode>
   </app>

   In this example there are used tags that specify the name of the item (text
of the menu item, a name of child application for example) by default and for
Russian locale, description of the format (which is usually displayed in the
pop-up or using information line of condition in the main window, just like it
is in XSL), path to the executable file of a child application, its options and
actions, that have to be executed after work of the child application is
finished.
   At the recent actions should stay in more detail. Information, concluded
between the tags <postcode>...</postcode> specifies the sequence of functions
of a parent application (API), which must be evoked after the child process is
closed. Functions, depending on the realization, can be presented for executing
as available for interpretator commands, fixed line constants and etc. In XSL
this is realized using a special module which contains main object, which is a
main object of the program, that you can use to call to any object or function
of XSL. In this case we are calling to update() function, which is a part of
dicts_manager, that is in the main window main_window, that we can call using
main object. Necessary parameter lang="python" specifies the language, which is
used to call application objects, in XSL it is also the language which is used
to write a parent application (remember that request language and application
language can be different, in that case request language must be specified as a
parameter). Familiar syntax and participle of operation has <precode>...</
precode> tag, which specifies the code, that must be executed before starting a
child application. Realization should guarantee the execution of functions
described in these tags independently from the result of the work of a child
application and other factors, if it is not obviously mentioned in executable
functions. It is also guaranteed that all the functions will be executed
linearly regardless of execution of the previous function within the bounds of
tag, so if there are many functions listed then all of them will be executed,
ignoring those that contain errors.

*** XML-tags of description files of IFA ***
title
Specifies applications name. This text, for example, will be displayed as a
menu item. An unnecessary parameter lang is possible for setting the language
of the title. Tag has a priority with this parameter, that resets value from
the tag by default (without parameter).
description
Used for describing the application. Works familiar to title tag, but sets its
information, for example, in the status line of the main window of parent
application on mouse on the menu item of a child application.
icon
Defines full path to the icon of a child application. Is displayed, for
example, beside the corresponding menu item.
path
Defines full path to the executable file of a child application. Used for
launching.
options
Line of options which will be transmitted to the executable file of a child
application during the launch. Realization may also contain macroses which will
be replased by the parent application by some of its variables during the
launch. In the current realization they are absent.
precode
Marks the code of parent application that must be executed before launching a
child application. It is best to put each function on its line. Tag must have a
necessary parameter lang which will specify language for function requests.
postcode
Functions familiar to the previous tag, but the code is executed after the
child process is finished its work..

   In that way a more flexible way of integration (comparing with familiar
methods) is reached.
   IFA in XSL is used for adding the possibility to launch other lingual
applications in the Tools --> Applications menu. Before creating the extension-
file you'll need to write a full description in XML-file using the information
above. If you want to use <precode> or <postcode> tags specify lang="python" as
a parameter for each of the tags (in order to use the code you'll have to study
the tree of constant objects in XSL sources). After that move the file (which
should have .xml or .ifa extension) to /usr/lib/xsl/ifa (prefix /usr depends on
a similar prefix, specified during the parameter installation). If the file is
made correctly you'll be able to find a new menu item for your application
after restarting XSL.
   Author of the original idea and realization for XSL - Devaev Maxim. if you
have questions about this technology you can ask them via e-mail
(mdevaev@lightlang.org.ru).
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Баги *****
===============================================================================
   Before releasing the programme, I removed all bugs that I had found. If you
find an error in the program, please report it to bugtrack@lightlang.org.ru. In
your message, please describe the error in detail, the conditions when it
appeared and all data that were input into the program. Please attach the
output of sl --debug.
   I will appreciate it very much because your messages will help us improve
the program.
===============================================================================
bugtrack@lightlang.org.ru



             ***** [lightlang.png] *****
===============================================================================
***** Translate-sites XSL menu extension *****
===============================================================================
   XSL has a small additional menu (Tools --> Internet Translation), which
items are presented as links to sites with automatic text translation. Every
link is described with a special XML-file, which contains link name, brief site
description, path to the icon and URL. It also has a possibility of
localization for changing the language of description.
   Below is the example of the file for Google Translate:
   <?xml version="1.0" encoding="UTF-8"?>
   <site>
      <title>Google Translate</title>
      <title lang="ru">Переводчик Google</title>
      <description>Universal multilanguage translator</description>
      <description lang="ru">Универсальный многоязычный переводчик</
description>
      <url>http://translate.google.com</url>
   </site>

   There are tags, that specify the name of the link by default and also for
the Russian locale, the description, which is done in the same way (it is
displayed in the status bar of the main window) and site's URL in the example
above.

*** XML-tags for description files of translate-site ***
title
Marks site's name. This text will be displayed as a menu item. Parameter lang
is optional for specifying language for the name. A tag with this parameter has
a priority over the default tag (without parameter).
description
Marks the description of the site. Works similar to title, but displays its
information in program's status bar on mouse over the menu item.
icon
Specifies the full path to site's icon (the file should be located on the local
machine). Icon is displayed nearby the menu item.
url
Specifies site's URL.

   Files have .xml or .trsite extensions and are located in /usr/lib/xsl/
trsites (prefix /usr depends on the prefix, that was specified during the
installation). If the file is made correctly you'll get a new menu item after
restarting XSL.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Acknowledgments *****
===============================================================================
   The author of this program, as well as all other programs in the LightLang
package, is Maxim Devaev.
   I wish to thank my dear Elisabeth, if it were not for the inspiration she
gave me, I would have never completed the program.

   Valuable assistants:
      Vladimir Fomkin
      Tihonov Sergey
   Translators:
      Kirill Nebogin
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Internet Feedback *****
===============================================================================
   E-Mails:
    * mdevaev@lightlang.org.ru - The Developer (only for private letters);
    * developers@lightlang.org.ru - For offers and ideas;
    * bugtrack@lightlang.org.ru - For bug reports.

   Sites:
    * http://lightlang.org.ru - Project's homepage.
===============================================================================

