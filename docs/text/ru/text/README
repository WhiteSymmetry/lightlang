


             ***** [lightlang.png] *****
===============================================================================
***** О системе LightLang *****
===============================================================================
   LightLang - комплект языковых программ для Linux. Основной проект - система
электронных словарей. В него входят несколько программ - SL (поисковое ядро),
XSL (графический интерфейс программы, написанный с использованием Qt4), LLRepo
(утилита для работы с репозиторием LightLang).
   Дополнительно устанавливаемые пакеты расширяют функциональность системы,
добавляя, например, возможность прослушать транскрипцию слова.
   Система устроена таким образом, что вы можете не использовать графический
интерфейс SL, а вызывать поисковое ядро напрямую через командную строку. Это
очень удобно на системах без X-сервера.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Что нового в этом выпуске LightLang *****
===============================================================================
   SL:
    * Добавлена опция вывода перевода в оригинальном формате словарей.
   XSL:
    * Добавлена возможность расширения меню сайтов-переводчиков;
    * Добавлена возможность автодетектирования Spy-сервисом окна;
    * Добавлено меню открытия ссылок в панели поиска;
    * Улучшена обработка критичных по производительности участков кода;
    * Наконец сделан нормальный диалог About;
    * Усовершенствована иконка в трее и ее меню;
    * Изменена арт-схема.
   LLRepo:
    * Программа полностью переписана на Python;
    * Изменен синтаксис опций.

*** Версии программ и утилит этого пакета ***
SL, поисковое ядро
6.5
XSL, графический интерфейс
6.6
LLRepo, менеджер репозитория
2.0
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Требования и конфигурация *****
===============================================================================
**** Установка LightLang ****
   Для работы системы необходима графическая библиотека Qt4 и прослойка для нее
для Python - PyQt4, в свою очередь нуждающаяся в SIP*. Все эти пакеты вы можете
найти в репозиториях своего дистрибутива, тогда установка этих библиотек
сведется к вводе команды из нескольких слов. Но если этих библиотек не
оказалось, то придется все устанавливать вручную. На данный момент SIP и Qt4
присутствуют если не по умолчанию, то в репозиориях современных дистрибутивов.
Чаще всего отсутствует PyQt4, жизнено важный для LightLang компонент. И так, по
следующим ссылкам вы можете скачать исходный текст Qt4, SIP и PyQt4:
    * http://trolltech.com/developer/downloads/qt/x11
    * http://www.riverbankcomputing.co.uk/sip/download.php
    * http://www.riverbankcomputing.co.uk/pyqt/download.php
   Компилировать и устанавливать данные библиотеки необходимо в той
последовательности в какой они даны здесь. Сдесь их установка не описывается,
поскольку она выполняется совершенно стандартными методами.
   Следует помнить, что лучше всего найти их в уже готовых пакетах для вашего
дистрибутива.
   Необходимые версии:
    * Qt4 >= 4.2.2
    * SIP >= 4.6
    * PyQt4 >= 4.2.2
   Затем, после установки этих библиотек можно перейти к установке собственно
LightLang.
   Вам доступно несколько опций конфигурации, которые можно передавать скрипту
configure:
    * --prefix=prefix_dir - используется для указания префикса каталога
      установки, по умолчанию - /usr;
    * --with-default-config=normal|liksys|kde|console - используется для
      указания пресета конфигурации. Это настройки, которые разработчики сочли
      наиболее подходящими и дали им имена. По умолчанию используется пресет
      normal, эта конфигурация оптимальна для больштнства пользователей, но вы
      можете воспользоваться и другими опциями, например liksys - эта
      конфигцрация по умолчанию, которой пользуется главный разработчик;
    * --with-audio-player=player_prog - используется для указания аудио плеера,
      которым осуществляетс проигрывание файлов голосовой транскрипции. Плеер
      должен быть обязательно консольным и запускаться командой вида:
            player filename
         Еще одним требованием является обязательная поддержка формата OGG, в
      котором LightLang хранит файлы голосовой транскрипции (в отличие от
      многих других словарей, которые используют несжатый формат WAV. Например
      можно указать использовать в качестве плеера MPlayer таким образом: --
      with-audio-player=mplayer. При этом путь к исполняемому файлу плеера
      должен находиться в вашей переменной PATH. По умолчанию используется
      плеер play;
    * --with-gui-terminal=terminal_prog - используется для указания программы
      графического терминала. По умолчанию используется XTerm, однако любители
      KDE могут установить, например, Konsole;
    * --with-gui-flag=no - используется для указания того, следует ли включить
      в сборку программы графический интерфейс (и проверять на необходимые для
      него библиотеки). По умолчанию используется значение yes. Отключение
      сборки графического интерфейса обычно нужно на тех системах, которые не
      поддерживают графическую систему или пользователь хочет установить другой
      графический интерфейс для SL.
   Во время установки вы можете скачать словари и установить их из нашего
репозитория, для этого создан скрипт download.py, который нужно выполнять между
выполнением configure и make. Если вы хотите посмотреть, какие словари и звуки
есть в нашем репозитории, выполните из каталога с LightLang команды:
      ./download.py remotelist dicts
      ./download.py remotelist sounds
   Потом можете скачать например словарь и добавить его в дерево исходных
текстов LightLang командой:
      ./download.py install dicts Mueller-24.en-ru
   Он будет автоматически распакован и встроен в каталог исходных текстов,
затем, на этапе сборки, откомпилирован. Для просмотра доступных опций работы с
репозиторием наберите:
      ./download.py help
   В общем случае, устанавливать LightLang можно следующими командами (скачает
звук en и словарь Mueller-24.en-ru):
      [liksys@max ~]$ tar -xjvf lightlang-0.8.6.tar.bz2
      [liksys@max ~]$ cd lightlang-0.8.6
      [liksys@max lightlang-0.8.6]$ ./configure
      [liksys@max lightlang-0.8.6]$ ./download.py install dicts Mueller-24.en-
ru
      [liksys@max lightlang-0.8.6]$ ./download.py install sounds en
      [liksys@max lightlang-0.8.6]$ make
      [liksys@max lightlang-0.8.6]$ su
      Password: введите пароль root
      [root@max lightlang-0.8.6]$ make install


**** Возможные проблемы: Fedora 7 ****
   При установке библиотеки PyQt4 из исходников выдавалась ошибка. Как-то
решил, но как - не помню :-) Вспоминаю. В принципе, решаемо. Но лучше
установить PyQt4 из репозиториев.


**** Возможные проблемы: Mandriva 2007 ****
   Пользователям Mandriva (2007.0 и 1) придется качать из Кукера указанные
библиотеки или ставить их из исходных текстов. Также будут проблемы с
зависимостями из-за Python-KDE, Python-Qt3 и QScintilla. Все это нужно
установить. Как вариант - ждать 2008.0.


**** Возможные проблемы: (K)Ubuntu ****
   На стадии конфигурации происходит ошибка вида:
      checking for gcc... gcc
      checking for C compiler default output file name...
      configure: error: C compiler cannot create executables
      See `config.log' for more details.
   В этом случае необходимо установить libstdc++-<version>-dev со всеми его
зависимостями.

   На стадии конфигурации происходит ошибка вида:
      checking for play... error: play is not found
   Эта проблема решается установкой пакета SOX или SND, как вариант можно
выбрать другой аудио-плеер.

   На стадии конфигурации происходит ошибка вида:
      Traceback (most recent call last):
      File "/usr/bin/xsl", line 24, in <module>
      import Main
      File "/usr/lib/xsl/pyqt4/Main.py", line 6, in <module>
      from PyQt4 import Qt
      File "/usr/lib/python2.5/site-packages/PyQt4/Qt.py", line 4, in <module>
      from PyQt4.QtOpenGL import *
      ImportError: No module named QtOpenGL
   Эта проблема решается установкой пакетов python-qt4-gl и python-qt4-sql с их
зависимостями.


   Следует отметить, что при конфигурировании в случае отсутствия нужного
компонента программа выдаст сообщение об этом и где его можно взять.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Использование SL в консоли *****
===============================================================================
**** Опции поиска ****
   SL - поисковое ядро, главная программа пакета LightLang. Она обеспечивает
всю базовую функциональность словаря - поиск, управление словарями, сборку
индексов. SL можно эффективно использовать в консоли, используя опции командной
строки.

   Чтобы найти слово, используйте команду:
      sl слово

   То же самое делает опция -u (--usualy):
      sl -u слово

   Чтобы найти словосочетание необходимо заключить его в кавычки:
      sl "несколько слов"

   Чтобы найти первое же слово, которое начинается на введенные символы,
используйте опцию -f (--first-concurrence):
      sl -f первые_буквы_слова
   Поиск в этом режиме так же запускается автоматически, если не было найдено
ни одного слова при обычном поиске.
   Чтобы применить расширенный поиск, воспользуйтесь опцией -c (--word-
combinations):
      sl -c слово
   Будут найдены все возможные словосочетания с этим словом.

   Если вы забыли слово, то вы можете использовать опцию -l (--list):
      sl -l первые_буквы_слова
   Первыми буквами слова могут быть, например hell. После этого программа
напечатает все слова, которые начинаются с этих символов. Среди них обязательно
будет искомое слово, такое как hello. Если вы все же не нашли требуемого, то
сократите количество символов на один с конца (так hell превратиться в hel).

   Если вы не знаете точного написания слова, то можете попытаться найти слово,
написание которого, как вам кажется, наиболее правильное, используя опцию -i (-
-ill-defined):
      sl -i countr
   Среди списка слов окажется нужное вам слово, например counter. Эту опцию так
же возможно использовать следующим образом:
      sl -p 50 -i countr
   Дополнительный аргумент (-p (--percent) 50) представляет собой указание
процента несовпадающих символов. По умолчанию - 40, это оптимальное значение.

   Если вы установили набор звуков, можете прослушать произношение слова,
используя опцию -s (--sound):
      sl -s набор:слово
   Параметр набор - это имя установленного набора звуков, например, en.


**** Опции справки ****
   Опция --help выводит на экран краткую справку.

   Опция --version выводит на экран версию программы.

   Опция --debug выводит отладочную информацию.


**** Опции управления словарями ****
   Опция --connect подключает указанный словарь для использования:
      sl --connect "dict"

   Опция --disconnect отключает указанный словарь (слова в нем искаться не
будут):
      sl --disconnect "dict"

   Опция --print-info выводит список всех словарей и список подключенных
словарей:
      sl --print-info

   Вы можете добавить собственный словарь, воспользовавшись опцией --install:
      sl --install "file"
   Затем, если вы хотите подключить его, воспользуйтесь опцией --connect, как
показано выше.
   Формат добавляемого словаря должен совпадать с форматом SL, так как
программа не может работать со словарями других форматов.

   Можно так же удалить установленный словарь, используя опцию --uninstall:
      sl --uninstall "dict"
   Перед удалением необходимо отключить словарь.

   Опция --use-list устанавливает список словарей, в которых должен
производиться поиск. Поиск происходит не зависимо от того, подключен словарь
или нет. Для разделения словарей используются символы "|", весь список же
заключается в одиночные ковычки:
      sl --use-list 'dict1|dict2|dict3' ...

   Опция --print-index индексирует указанный файл:
      sl --print-index "file"
   Выданный программой индекс нужно записать в начале файла словаря.
   После записи индекса нужно еще раз проиндексировать файл, поскольку после
записи смещение файла изменится. Новый индекс нужно записать поверх старого.
   Типичный алгоритм индексации словаря выглядит следующим образом:
      sl --print-index dict > /tmp/dict1
      cat dict >> /tmp/dict1
      sl --print-index /tmp/dict1 > /tmp/dict2
      cat dict >> /tmp/dict2
      mv /tmp/dict2 dict
   Если вы не хотите использовать индексацию, в начале файла пропишите тег
[noindex].


**** Опции настроек ****
   Опция --output-format=html|text|native устанавливает формат вывода
программы. По умолчанию используется text.

   Опция --use-terminal-escapes=yes|no устанавливает разрешение на
использование ESC-последовательностей терминала для цветового форматирования.
По умолчанию разрешено, если стандартный вывод является терминалом, опция же
используется для принудительной установки разрешения.

   Опция -t (--show-time) заставляет программу показывать время, затраченное на
поиск.


**** Переменные окружения ****
   При использовании в консоли можно экспортировать переменную окружения
COLUMNS, тогда вывод программы (для режима text) будет выравниваться по ширине
всей консоли:
      export COLUMNS

   SL определяет домашний каталог пользователя через переменную HOME, изменив
ее, можно заставить искать другой каталог настроек (находящийся в домашнем
каталоге пользователя).
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Использование менеджера репозитория LLRepo *****
===============================================================================
   LLRepo - менеджер репозитория LightLang, предназначенный для пополнения
локальных словарных баз и других ресурсов из FTP-репозиториев LightLang. Можно
очень просто добавить новый ресурс в систему, пользуясь командой llrepo.
Естественно, компьютер должен быть поключен к интернету :-).

   На данный момент LLRepo поддерживает четыре операции для работы с ресурсами:
remotelist, locallist, install, uninstall. Первые две - информационные, служат
для получения информации о доступных и установленных ресурсов соответственно,
вторые - для установки и удаления ресурсов. Все четыре опции требуют указания
типа ресурса - dicts или sounds. Опции установки и удаления принимают после
типа ресурса имя ресурса, над которым производится операция (может быть указано
несколько ресурсов).

   Для просмотра доступных словарей в репозитории используйте следующую
команду:
      llrepo remotelist dicts

   Для просмотра доступных звуков в репозитории используйте следующую команду:
      llrepo remotelist sounds

   Для установки словарей из репозитория используйте следующую команду
(последними параметрами перечислите имена необходимых ресурсов, полученных от
вышеуказанных комманд):
      llrepo install dicts file1 file2 fileN

   Для установки звуков из репозитория используйте следующую команду
(последними параметрами перечислите имена необходимых ресурсов, полученных от
вышеуказанных комманд):
      llrepo install sounds file1 file2 fileN

   Для просмотра установленных словарей используйте следующую команду:
      llrepo locallist dicts

   Для просмотра установленных звуков используйте следующую команду:
      llrepo locallist sounds

   Для удаления установленных словарей используйте следующую команду
(последними параметрами перечислите имена необходимых ресурсов, полученных от
вышеуказанных комманд):
      llrepo uninstall dicts file1 file2 fileN

   Для удаления установленных звуков используйте следующую команду (последними
параметрами перечислите имена необходимых ресурсов, полученных от вышеуказанных
комманд):
      llrepo uninstall sounds file1 file2 fileN

   Команды help и version выводят краткую справку и информацию о версии
программы соответственно.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Теги и формат словаря *****
===============================================================================
   Формат SL представляет собой модифицированный формат Mova. Каждая запись в
словаре составляет одну строку, слово отделяется от перевода двумя пробелами.
Используются специальные теги, как для управления поиском, так и для
форматирования.

*** Теги управления поиском ***
[index]
Обозначает начало индекса.
[/index]
Обозначает конец индекса.
[noindex]
Обозначает, что файл не индексирован.
#
Комментарий. При поиске игнорируется, так же, как и пустые строки.

*** Теги Форматирования ***
\{...\}
Блоки. Текст, заключенный в блок, отделяется от всех остальных: он начинается с
новой строки, а все остальные строки оттабулированы. Могут быть вложенными,
создавая группированный текст внутри больших груп-блоков.
\[...\]
Текст, заключенный в эти теги, будет жирным.
\(...\)
Текст, заключенный в эти теги, будет курсивным.
\<...\>
Текст, заключенный в эти теги, будет помечен как служебный (обычно помечается
зеленым цветом).
\_...\_
Текст, заключенный в эти теги, будет подчеркнутым.
\@...\@
Текст, заключенный в эти теги, будет помечен, как ссылка на другое слово.
\s...\s
Текст, заключенный в эти теги, будет представлять собой ссылку на звуковую
транскрипцию. Синтаксис запроса такой же, как и у опции -s.
\n
Обозначает перенос строки.
\t
Обозначает табуляцию.
\\
Обозначает косую черту.

   Индекс имеет следующий формат:
      [index]
      ...
      char value
      ...
      [/index]
где char - некоторый символ, value - смещение символа.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Использование графического интерфейса XSL *****
===============================================================================
   О том, как использовать графический интерфейс становится понятно сразу после
его запуска, поэтому здесь приведены лишь некоторые особенности и соответствие
консольных опций SL и элементов графического интерфейса.


**** Особенности графического интерфейса XSL ****
    * По мере ввода слова в окне списка будут отображаться слова, начинающиеся
      с введенных символов;
    * Каждое слово в списке является ссылкой, нажав на которую, вы увидите
      перевод этого слова;
    * Нажатие клавиши Enter приводит к обычному поиску слова;
    * После произведения поиска можно прослушать произношение нажав в тексте
      перевода маленькую иконку с треугольником;
    * Каждое слово можно открывать в отдельной вкладке; вкладки самостоятельны,
      содержимое одной вкладки никак не влияет на содержимое другой вкладки.


*** Соответствие опций командной строки элементам интерфейса ***
-u
[Поиск]
-l
Автоматически или [Список слов]
-c
[Расширенный поиск]
-i
[Похожие слова]


**** Дополнительные возможности ****

   XSL включает в себя сервис Spy, осуществляющий поиск по выделенному слову.
После запуска сервиса выделите мышью слово в любом окне и увидите его перевод.
Можно отредактировать поисковый запрос, если открыть главное окно XSL. Опция
автоидентификации окна позволяет работать со Spy, выделяя в окне XSL слова, при
этом всплывающее окно перевода появляться не будет. То есть при установке
данной опции окно перевода будет открываться при выделении везде, кроме самого
XSL.
   XSL так же создает иконку в трее, позволяет сворачиваться в нее. В меню
иконки содержатся пункты управлени Spy, это позволяет использовать данный
сервис, не разворачивая главного окна программы.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Технология IFA - дополнительные приложения для XSL *****
===============================================================================
   Технология IFA (Integratable Friend Applications) позволяет программам
расширять функциональность друг друга, добавляя возможность запуска одного
приложения из другого и обеспечивая возможность выполнения произвольного API
родительского приложения до и после запуска дочернего приложения.
   Если одно приложение (дочернее) желает расширить функциональность другого
приложения (родительское), дав возможность программе-родителю запускать себя с
определенными параметрами, оно должно предоставить ему описание способа
собственного запуска и (возможно) последовательность необходимых API-функций,
производящих некоторые действия над родительским приложением до и после запуска
дочернего приложения. Это достигается применением простых XML-файлов,
содержащих всю необходимую информацию. Родительское приложение читает этот файл
и регистрирует все данные о приложении. Затем (в зависимости от реализации)
создает пункт меню, активировав который, пользователь может запустить дочернее
приложение.
   Отличие этой технологии от обычных файлов расширения меню состоит в
возможности доступа к API родительского приложения для XML-файла. Это может
оказаться полезным, если, например, дочернее приложение устанавливает некоторые
файлы, а родительское приложение оперирует этими файлами, тогда после окончания
работы дочернего приложения можно сделать автоматическое обновление списка
доступных файлов родительского приложения. Возможность доступа к API
различается в зависимости от языка, на котором написана (или от языка запросов
к API). В интерпретируемых или компилируемых в байт-код языках (Python,
например), выполнение произвольных функций может быть обеспечено использованием
встроенных возможностей (exec в Python), другие же языки могут потребовать
встраивания интерпретаторов, или других средств выполнения скриптов. Например,
реализация для C++ и Qt4 может выглядеть, как интерпретация языка QSA.
   Файлы IFA так же имеют возможность локализации для изменения языка описания
приложения. По умолчанию используется кодировка UTF-8, но реализация может быть
различной.
   Ниже дан пример файла IFA для XSL, описывающий запуск терминала:
   <?xml version="1.0" encoding="UTF-8"?>
   <app>
      <title>LLRepo Console</title>
      <title lang="ru">Консоль LLRepo</title>
      <description>LLRepo - root terminal mode</description>
      <description lang="ru">LLRepo - терминал root</description>
      <path>/usr/bin/xterm</path>
      <options>
         -e "echo To get started with LLRepo run su and enter the root
password.
         To learn more details about the available options, run man llrepo
&amp;&amp; /bin/sh"
      </options>
      <postcode lang="python">
         main.main_window.dicts_manager.update()
      </postcode>
   </app>

   В данном описании содержатся теги, задающие имя метки (текст пункта меню,
которым будет вызываться дочерняя программа, например) по умолчанию и для
Русской локали, описание того же формата (обычно отображается всплывающей
подсказкой или, как в XSL, информацией в строке состояния в главном окне), путь
к исполняемому файлу дочернего приложения, его опции и действия которые должны
выполняться по завершению работы дочернего приложения.
   На последнем действии следует остановиться более подробно. Информация,
заключенная между тегами <postcode>...</postcode> устанавливает
последовательность функций родительского приложения (API), которые должны быть
вызваны после закрытия дочернего приложения. Функции, в зависимости от
реализации, могут быть представлены для выполнения в виде доступных
интерпретатору команд, фиксированных строковых констант и т.п. В XSL это
реализовано с помощью специального модуля, содержащего объект main,
представляющий из себя главный объект программы, работая с которым можно
обратиться к любому другому объекту или функции XSL. В данном случае мы
обращаемся к функции update(), которая принадлежит объекту dicts_manager,
находящемуся в главном окне main_window, к которому можно обратиться через
объект main. Обязательный параметр lang="python" обозначает язык, с помощью
которого возможно обратиться к объектам приложения, в случае с XSL это еще и
язык, на котором было написано родительское приложение (следует отметить, что
язык запросов и язык приложения могут различаться, в этом случае параметром
указывается язык запросов). Аналогичный синтаксис и принцип работы имеет тег
<precode>...</precode>, обозначающий код, выполняемый до запуска дочернего
приложения. Реализация должна гарантировать выполнение функций описанных в этих
тегах, независимо от результата работы дочернего приложения и других факторов,
если это явно не указано в выполняемых функциях. Так же гарантировано, что
будут выполнены все функции линейно, не зависимо от выполнения предыдущей
функции в пределах тега, то есть если перечислено несколько функций, то будут
выполнены все, содержащие ошибку вызовы будут пропущены.

*** XML-теги файлов описания IFA ***
title
Обозначает название приложения. Это текст, который, например, будет
отображаться как пункт меню. Возможен необязательный параметр lang, для
установки языка названия. Приоритет имеет тег с данным параметром,
переопределяющий значение из тега по умолчанию (без параметра)
description
Служит для описания приложения. Работает точно так же, как и тег title, но
устанавливает свою информацию, например, в строку статуса главного окна
родительской программы при наведении курсора на пункт меню дочернего
приложения.
icon
Определяет полный путь к иконке дочерней программы. Отображается, например,
рядом с соответствующим пунктом меню.
path
Определяет полный путь к исполняемому файлу дочернего приложения. Используется
при запуске.
options
Строка опций, которые будут переданы при запуске исполняемому файлу дочернего
приложения. В принципе, реализация может содержать макросы, которые
родительское приложение заменит на некоторые свои переменные при запуске. В
текущей реализации они отсутствуют.
precode
Обозначает код родительского приложения, который должен быть выполнен до
запуска дочерней программы. Хорошим тоном является размещение одной функции на
строку. Тег должен иметь обязательный параметр lang, обозначающий язык для
запросов функций.
postcode
Функционирует так же как и предыдущий тег, но код выполняется после завершения
дочернего приложения.

   Таким образом обеспечен более гибкий метод интеграции приложений по
сравнению с аналогичными методами.
   IFA в XSL используется для добавления возможности запуска других языковых
приложений в меню Инструменты --> Приложения. Для создания файла-расширения
необходимо сделать точное описание в XML-файле, используя приведенную выше
информацию. Если вы планируете использовать теги <precode> или <postcode>, то
передавайте в качестве параметра обоим тегам lang="python" (для использования
кода вам придется изучить дерево постоянных объектов в исходном коде XSL).
После этого разместите файл (должен иметь расширение .xml или .ifa) в каталоге
/usr/lib/xsl/ifa (префикс /usr зависит соответствующего заданного при установке
параметра). Если файл составлен корректно, то после перезапуска XSL вы получите
пункт для нового приложения.
   Автор оригинальной идеи и реализации для XSL - Деваев Максим. По всем
вопросам применения данной технологии обращайтесь по электронной почте
(mdevaev@gmail.com).
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Баги *****
===============================================================================
   Перед выпуском программы я устранил все глюки, которые нашел. Если вы
обнаружите ошибку в программе, пожалуйста, сообщите о ней на почтовый ящик
bugtrack@lightlang.org.ru. В сообщении точно опишите ошибку, условия ее
возникновения и все данные, которые вводились в программу. К сообщению так же
приложите вывод команды sl --debug.
   Я буду вам очень признателен, так как все ваши сообщения помогут сделать эту
программу лучше.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Расширение меню сайтов-переводчиков XSL *****
===============================================================================
   XSL для удобства содержит небольшое дополнительное меню (Инструменты --
> Перевод в Интернете), пункты которого представляют собой ссылки на сайты
автоматического перевода текстов. Каждая ссылка описывается специальным XML-
файлом, содержащи имя ссылки, краткое описание сайта, путь к его иконке и URL.
Имеется возможность локализации для изменения языка описания приложения.
   Ниже дан пример файла для Google Translate:
   <?xml version="1.0" encoding="UTF-8"?>
   <site>
      <title>Google Translate</title>
      <title lang="ru">Переводчик Google</title>
      <description>Universal multilanguage translator</description>
      <description lang="ru">Универсальный многоязычный переводчик</
description>
      <url>http://translate.google.com</url>
   </site>

   В данном описании содержатся теги, задающие имя метки (текст пункта меню) по
умолчанию и для Русской локали, описание того же формата (отображается
информацией в строке состояния в главном окне) и URL сайта.

*** XML-теги файлов описания сайтов-переводчиков ***
title
Обозначает название сайта. Это текст, который будет отображаться как пункт
меню. Возможен необязательный параметр lang, для установки языка названия.
Приоритет имеет тег с данным параметром, переопределяющий значение из тега по
умолчанию (без параметра).
description
Служит для описания сайта. Работает точно так же, как и тег title, но
устанавливает свою информацию в строку статуса главного окна программы при
наведении курсора на пункт меню сайта.
icon
Определяет полный путь к иконке сайта (предпологается, что это файл,
находящийся на локальном компьютере). Отображается рядом с соответствующим
пунктом меню.
url
Устанавливает URL сайта.

   Файлы имеют иметь расширение .xml или .trsite и находятся в каталоге /usr/
lib/xsl/trsites (префикс /usr зависит соответствующего заданного при установке
параметра). Если файл составлен корректно, то после перезапуска XSL вы получите
пункт для нового сайта.
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Авторы и благодарности *****
===============================================================================
   Автор этой программы и всех других из базового пакета LightLang - Деваев
Максим.
   Спасибо моей любимой Лизавете, если бы она не вдохновляла меня, я бы никогда
не закончил эту программу.

   Помогали:
      Владимир Фомкин
      Сергей Тихонов
   Переводчики:
      Кирилл Небогин
===============================================================================



             ***** [lightlang.png] *****
===============================================================================
***** Адреса в Интернете *****
===============================================================================
   Электронная почта:
    * mdevaev@gmail.com - Разработчик, только для личных писем;
    * developers@lightlang.org.ru - Для предложений;
    * bugtrack@lightlang.org.ru - Для сообщений об ошибках.

   Сайты:
    * http://lightlang.org.ru - Домашняя страница.
===============================================================================

